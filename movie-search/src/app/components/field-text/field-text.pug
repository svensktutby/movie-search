//- All mixins in this file should initiate with the name of the block (field-text)

mixin field-text(props)

  //- Accept:
  //-   props {
  //-     title: ''         {string} - text with a title (showed above the field)
  //-     isTextarea: false {bool}   - flag input/textarea
  //-     helpText: ''      {string} - explanation below the field
  //-     mods: ''          {string} - modifiers list
  //-     val: ''           {string} - text in the field
  //-     attrs:            {object} - any attributes for input/textarea
  //-       type:           {string}
  //-       placeholder:    {string}
  //- Invoke:
        +field-text({
          title: 'Title',
          isTextarea: true,
          helpText: 'Prompt',
          mods: '',
          val: '',
          attrs: {
            name: 'comment',
          }
        })

  -
    if(typeof(props) === 'undefined') {
      let props = {};
    }
    var allMods = '';
    if(typeof(props.mods) !== 'undefined' && props.mods) {
      let modsList = props.mods.split(',');
      for (let i = 0; i < modsList.length; i++) {
        allMods = allMods + ' field-text--' + modsList[i].trim();
      }
    }

  label.field-text(class=allMods)&attributes(attributes)
    if(typeof(props.title) !== 'undefined' && props.title)
      span.field-text__name!= props.title
    span.field-text__input-wrap
      if(typeof(props.isTextarea) !== 'undefined' && props.isTextarea)
        textarea.field-text__input&attributes(props.attrs)= props.val
      else
        input.field-text__input(type=(typeof(props.attrs) !== 'undefined' && props.attrs.type) ? props.attrs.type: 'text', value=props.val)&attributes(props.attrs)
      if(typeof(props.helpText) !== 'undefined' && props.helpText)
        span.field-text__help-text!= props.helpText
      block
